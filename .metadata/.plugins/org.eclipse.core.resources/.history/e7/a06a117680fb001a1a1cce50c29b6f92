package com.restaurant.payBox.service;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.restaurant.payBox.dao.BillDAO;
import com.restaurant.payBox.dao.OrderClientDAO;
import com.restaurant.payBox.dao.PlateDAO;
import com.restaurant.payBox.entity.Bill;
import com.restaurant.payBox.entity.OrderClient;
import com.restaurant.payBox.entity.Plate;
import com.restaurant.payBox.entity.Waiter;

/**
 *
 * @author Juliana Barrera, Lorena Espitia, Felipe García, Nicolás Ramos, Lina Sanabria
 */
@Service
public class BillService {

	private OrderClientDAO orderClientDAO;
	private PlateDAO plateDAO;
	private BillDAO billDAO;
	public BillService(OrderClientDAO orderClientDAO, PlateDAO plateDAO, BillDAO billDAO) {
		this.plateDAO = plateDAO;
		this.orderClientDAO = orderClientDAO;
		this.billDAO = billDAO;
	}	

	
	
	public ResponseEntity<Bill> createBill(List<OrderClient> orderList) {
		Bill billNew = new Bill();
		for(OrderClient orderClient : orderList ) {
			billNew.getOrderClientList().add(createOrder(orderClient).getBody());
		}
			
//		billNew.setOrderClientList(orderList);
		billNew.setDelivered(true);//cambiar estado
		billNew.setTotal(totalBill(billNew.getOrderClientList()));//llamar al metodo totalizar factura
		billNew.setDate(orderList.get(0).getDate());
		billNew.setTips(orderList.get(0).isTips());
		Bill saveBill = billDAO.save(billNew);
		if(billDAO.findById(saveBill.getIdBill()).isPresent()) {
			return ResponseEntity.ok(saveBill);
		}else 
			return ResponseEntity.noContent().build();

	}
	/**
	 * crear ordenes 
	 * @param plateList
	 * @return
	 */
	public ResponseEntity<OrderClient> createOrder(OrderClient orderClient) {

		OrderClient orderClientNew = new OrderClient();
		orderClientNew.setOrderClient(orderClient.getOrderClient());
		orderClientNew.setTypeBill(orderClient.getTypeBill());
		orderClientNew.setTypePayment(orderClient.getTypePayment());
		orderClientNew.setWaiter(new Waiter(orderClient.getWaiter().getWaiter()));
		orderClientNew.setDate(orderClient.getDate());
		orderClientNew.setTips(orderClient.isTips());
		//		orderClientNew.setClient(new Client(orderClient.getClient().getIdClient()));
		for (Plate plate : orderClient.getPlateList()) {
			orderClientNew.getPlateList().add(createPlate(plate).getBody());
		}
		//		createPlate(orderClient.getPlateList());
		OrderClient saveOrderClient = orderClientDAO.save(orderClientNew);
		if(orderClientDAO.findById(saveOrderClient.getIdOrder()).isPresent()) {
			return ResponseEntity.ok(orderClientNew);
		}else 
			return ResponseEntity.noContent().build();
	}
	/**
	 * crear platos
	 * @param plateList
	 * @return
	 */

	public ResponseEntity<Plate> createPlate(Plate plate) {
		Plate plateNew = new Plate();
		plateNew.setPlate(plate.getPlate());
		plateNew.setNamePlate(plate.getNamePlate());
		plateNew.setTypePlate(plate.getTypePlate());
		plateNew.setQualificationPlate(plate.getQualificationPlate());
		plateNew.setPrice(plate.getPrice());
		Plate	savePlate = plateDAO.save(plateNew);
		if(plateDAO.findById(savePlate.getIdPlate()).isPresent()) {
			return ResponseEntity.ok(plateNew);
		}else 
			return ResponseEntity.noContent().build();
	}

	/**
	 * traer lista de ordenes
	 * @param plateList
	 * @return
	 */

	public ResponseEntity<List<OrderClient>> getAllOrdersClient() {
		List<OrderClient> orderClientList = orderClientDAO.findAll();
		orderClientList.size();
		System.out.println(totalBill(orderClientList));
		return ResponseEntity.ok(orderClientList);

	}

	public ResponseEntity<List<Bill>> getAllBills() {
		List<Bill> billList = billDAO.findAll();
		billList.size();
		System.out.println("Yo me imprimo:"+totalRestaurantIncome(billList));
		setTipToWaiter(billList.get(0));
		//		System.out.println(totalRestaurantIncome(billList));
		return ResponseEntity.ok(billList);

	}

	/**
	 * Este metodo totaliza la factura
	 */

	public double totalBill(List<OrderClient> clientList) {
		double total = 0;
		for (int i = 0; i < clientList.size(); i++) {
			for (Plate plate : clientList.get(i).getPlateList()) {
				total += plate.getPrice();
			}
		}
		return total;

	}

	/**
	 * Este metodo calcula el total de ingresos del restaurante por dia
	 */
	public Map<LocalDate, Double> totalRestaurantIncome(List<Bill> listBills) {
		double total = 0;
		LocalDate localDate = null;
		Map<LocalDate, Double> mapBillIncome = new HashMap<LocalDate, Double>();
		for (int i = 0; i < listBills.size(); i++) {
			localDate = listBills.get(i).getDate();
			if ((localDate).equals(listBills.get(i).getDate())) {
				total = listBills.get(i).getTotal();
				System.out.println("-->"+ total);
				System.out.println("Fecha:"+localDate);
				if (mapBillIncome.containsKey(listBills.get(i).getDate())) {
					System.out.println("holllllllaaaaa");
					total += mapBillIncome.get(localDate);
					System.out.println("Aqui suma:"+total);
					mapBillIncome.remove(localDate);
					mapBillIncome.put(localDate, total);
				}else {
					mapBillIncome.put(localDate, total);
				}
			}
		}
		return mapBillIncome;
	}
	
	/**
	 * MÃ©todo que le asigna la propina al mesero
	 */
	public void setTipToWaiter(Bill bill) {
		if (bill.isTips() == true) {
			for (OrderClient orderClient: bill.getOrderClientList()) {
				
				orderClient.getWaiter().setTip(orderClient.getWaiter().getTip()+calculateTipWaiter(bill.getTotal()));
				System.out.println(orderClient.getWaiter().getTip() +"----"+orderClient.getWaiter().getTip());
			}
		}
	}

	/**
	 * Este metodo calcula la propina del cajero
	 */
	public double calculateTipWaiter(double total) {
		int totalTip = 0;
		totalTip += ((total *10)/100);
		return totalTip;
	}

	
//	public Map<Object, Double> sumCalificationWaiter(List<Bill> listBills) {
//		int total = 0;
//		Waiter waiter = null;
//		Map<Object, Double> mapBillIncome = new HashMap<Object, Double>();
//		for (int i = 0; i < listBills.size(); i++) {
//			waiter = listBills.get(i).getDate();
//			if ((waiter).equals(listBills.get(i).getDate())) {
//				total = listBills.get(i).getTotal();
//				System.out.println("-->"+ total);
//				System.out.println("Fecha:"+localDate);
//				if (mapBillIncome.containsKey(listBills.get(i).getDate())) {
//					System.out.println("holllllllaaaaa");
//					total += mapBillIncome.get(waiter);
//					System.out.println("Aqui suma:"+total);
//					mapBillIncome.remove(waiter);
//					mapBillIncome.put(waiter, total);
//				}else {
//					mapBillIncome.put(waiter, total);
//				}
//			}
//		}
//		return mapBillIncome;
//
//	}
//	
//	/**
//	 * Mesero con mejor calificación diaria
//	 */
//	public  Map<Integer, Double>  bestScoreWaiter(List<Bill> listBills) {
//		int total = 0;
//		LocalDate localDate = null;
//		Map<LocalDate, Double> mapBillIncome = new HashMap<LocalDate, Double>();
//		for (int i = 0; i < listBills.size(); i++) {
//			localDate = listBills.get(i).getDate();
//			if ((localDate).equals(listBills.get(i).getDate())) {
//				total = listBills.get(i).getTotal();
//				System.out.println("-->"+ total);
//				System.out.println("Fecha:"+localDate);
//				if (mapBillIncome.containsKey(listBills.get(i).getDate())) {
//					System.out.println("holllllllaaaaa");
//					total += mapBillIncome.get(localDate);
//					System.out.println("Aqui suma:"+total);
//					mapBillIncome.remove(localDate);
//					mapBillIncome.put(localDate, total);
//				}else {
//					mapBillIncome.put(localDate, total);
//				}
//			}
//		}
//		return mapBillIncome;
//	}
	
	/**
	 * Este metodo muestra el plato más vendido por dia
	 */
	public void morePlateSale() {
		
	}
	
	
	/**
	 * Este metodo muestra el plato mejor calificado por dia
	 */
	public void bestCalificatePlate() {
		
	}
	
	/**
	 * Asignación de Propina diaria
	 */

}
